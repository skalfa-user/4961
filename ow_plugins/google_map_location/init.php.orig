<?php

/**
 * Copyright (c) 2013, Podyachev Evgeny <joker.OW2@gmail.com>
 * All rights reserved.

 * ATTENTION: This commercial software is intended for use with Oxwall Free Community Software http://www.oxwall.org/
 * and is licensed under Oxwall Store Commercial License.
 * Full text of this license can be found at http://www.oxwall.org/store/oscl
 */
/**
 * @author Podyachev Evgeny <joker.OW2@gmail.com>
 * @package ow_plugins.google_maps_location
 * @since 1.0
 */

OW::getRouter()->addRoute(new OW_Route('googlelocation_admin', 'admin/plugins/googlelocation', 'GOOGLELOCATION_CTRL_Admin', 'index'));
OW::getRouter()->addRoute(new OW_Route('googlelocation_user_map', 'users/map', 'GOOGLELOCATION_CTRL_UserMap', 'map'));
OW::getRouter()->addRoute(new OW_Route('googlelocation_event_map', 'event/map', 'GOOGLELOCATION_CTRL_EventMap', 'map'));
OW::getRouter()->addRoute(new OW_Route('googlelocation_user_list', 'users/map/:lat/:lng/user-list/:hash', 'GOOGLELOCATION_CTRL_UserList', 'index' ));

function googlelocation_on_user_unregister( OW_Event $event )
{
    $params = $event->getParams();

    if ( !empty($params['userId']) )
    {
        $userId = (int) $params['userId'];
        GOOGLELOCATION_BOL_LocationService::getInstance()->deleteByEntityIdAndEntityType($userId, GOOGLELOCATION_BOL_LocationDao::ENTITY_TYPE_USER);
    }
}
OW::getEventManager()->bind(OW_EventManager::ON_USER_UNREGISTER, 'googlelocation_on_user_unregister');

function googlelocation_add_userlist_data( BASE_CLASS_EventCollector $event )
{
    $event->add(
        array(
            'label' => OW::getLanguage()->text('googlelocation', 'users_map_menu_item'),
            'url' => OW::getRouter()->urlForRoute('googlelocation_user_map', array('list' => 'map')),
            'iconClass' => 'ow_ic_bookmark',
            'key' => 'map',
            'order' => 6
        )
    );
}
OW::getEventManager()->bind('base.add_user_list', 'googlelocation_add_userlist_data');

OW::getRouter()->addRoute(new OW_Route('googlelocation_users_map', 'users_map', 'GOOGLELOCATION_CTRL_UserMap', 'map'));

function googlelocation_questions_field_init( OW_Event $e )
{
    $params = $e->getParams();

    if ( $params['fieldName'] == 'googlemap_location' )
    {
        $formElement = new GOOGLELOCATION_CLASS_Location($params['fieldName']);

        if ( $params['type'] == 'search' )
        {
            $formElement = new GOOGLELOCATION_CLASS_LocationSearch($params['fieldName']);
            $formElement->setInvitation(OW::getLanguage()->text('googlelocation', 'googlemap_location_search_invitation'));
            $formElement->setHasInvitation(true);
        }

        $e->setData($formElement);
    }
}
OW::getEventManager()->bind('base.questions_field_init', 'googlelocation_questions_field_init');

function googlelocation_questions_save_data( OW_Event $e )
{
    $params = $e->getParams();
    $data = $e->getData();

    foreach ( $data as $key => $value )
    {
        if ( $key == 'googlemap_location' )
        {
            $element = new GOOGLELOCATION_CLASS_Location('location');
            $element->setValue($value);
            $valueList = $element->getListValue();

            if ( empty($valueList) || empty($valueList['json']) )
            {
                unset($data[$key]);
                continue;
            }

            $json = !empty($valueList['json']) ? json_decode($valueList['json'], true) : array();

            $countryCode = "";
            if ( !empty($json['address_components']) )
            {
                foreach ( $json['address_components'] as $component )
                {
                    if ( !empty($component['types']) && is_array($component['types']) && in_array('country', $component['types']) )
                    {
                        $countryCode = !empty($component['short_name']) ? $component['short_name'] : "";
                    }
                }
            }

            $location = GOOGLELOCATION_BOL_LocationService::getInstance()->findByUserId($params['userId']);

            if ( empty($location) )
            {
                $location = new GOOGLELOCATION_BOL_Location();
            }

            $location->entityId = (int) $params['userId'];
            $location->countryCode = $countryCode;
            $location->address = !empty($valueList['address']) ? $valueList['address'] : "";
            $location->lat = (float) $valueList['latitude'];
            $location->lng = (float) $valueList['longitude'];
            $location->northEastLat = (float) $valueList['northEastLat'];
            $location->northEastLng = (float) $valueList['northEastLng'];
            $location->southWestLat = (float) $valueList['southWestLat'];
            $location->southWestLng = (float) $valueList['southWestLng'];
            $location->json = !empty($valueList['json']) ? $valueList['json'] : "";
            $location->entityType = GOOGLELOCATION_BOL_LocationDao::ENTITY_TYPE_USER;

            GOOGLELOCATION_BOL_LocationService::getInstance()->save($location);

            $data[$key] = $location->address;
        }
    }

    $e->setData($data);
}
OW::getEventManager()->bind('base.questions_save_data', 'googlelocation_questions_save_data');

function googlelocation_questions_field_get_value( OW_Event $e )
{
    $params = $e->getParams();
    $data = $e->getData();

    if ( !empty($params['fieldName']) && $params['fieldName'] == 'googlemap_location' && !empty($params['value']) )
    {
        $location = $params['value'];

        if ( !empty($location['json']) )
        {

            $userViewPresentation = OW::getConfig()->getValue('base', 'user_view_presentation');

            $locationDto = new GOOGLELOCATION_BOL_Location();

            $locationDto->entityId = (int) $params['userId'];
            $locationDto->address = !empty($location['address']) ? $location['address'] : "";
            $locationDto->lat = (float) $location['latitude'];
            $locationDto->lng = (float) $location['longitude'];
            $locationDto->northEastLat = (float) $location['northEastLat'];
            $locationDto->northEastLng = (float) $location['northEastLng'];
            $locationDto->southWestLat = (float) $location['southWestLat'];
            $locationDto->southWestLng = (float) $location['southWestLng'];
            $locationDto->json = !empty($location['json']) ? $location['json'] : "";
            $locationDto->entityType = GOOGLELOCATION_BOL_LocationDao::ENTITY_TYPE_USER;

			$location = get_object_vars( $locationDto );

            /*if ( $userViewPresentation == 'tabs' )
            {
                OW::getDocument()->addOnloadScript("
                        var section = $('.section_" . $params['questionInfo']['sectionName'] . "');
                        section.show();
                        section.attr('style','position:absolute;left:-1000px');
                        $('li.menu_" . $params['questionInfo']['sectionName'] . "').bind('click.display_google_map', function(){
                            section.removeAttr('style');
                            $(this).unbind('click.display_google_map');
                        });");
            }*/

         /* $js = UTIL_JsGenerator::newInstance();
         $js->jQueryEvent('.ow_googlemap_location_address a', 'click',
             "OW.loadComponent( 'GOOGLELOCATION_CMP_ProfileViewMap',[e.data.location], '.ow_googlemap_location_map' );
              ",
         array("e"), array(
             "location" => $location
         ));

         OW::getDocument()->addOnloadScript( $js ); */
          OW::getDocument()->addOnloadScript("
                        var link = $('.ow_googlemap_location_address');
                        link.on('click', 'a', function(event){
                                  $('.ow_googlemap_location_map').toggle(200);
                                  OW.loadComponent( 'GOOGLELOCATION_CMP_ProfileViewMap',[ " .  json_encode( $location ) . " ], '.ow_googlemap_location_map' );
                                  link.off('click', 'a');
                                  link.on('click', 'a', function(event){ $('.ow_googlemap_location_map').toggle(200); } );
                                });
                        ");

            /* $map = new GOOGLELOCATION_CMP_Map();
            $map->setHeight('200px');
            $map->setZoom(9);
            $map->setMapOptions(array(
                'disableDefaultUI' => "false",
                'draggable' => "false",
                'mapTypeControl' => "false",
                'overviewMapControl' => "false",
                'panControl' => "false",
                'rotateControl' => "false",
                'scaleControl' => "false",
                'scrollwheel' => "false",
                'streetViewControl' => "false",
                'zoomControl' => "false"));
            $map->setCenter($location['latitude'], $location['longitude']);
            $map->setBounds($location['southWestLat'], $location['southWestLng'], $location['northEastLat'], $location['northEastLng']);
            $map->addPoint($location['latitude'], $location['longitude'], $location['address']);
            $mapHtml = $map->render(); */

            $data = '<div class="ow_googlemap_location_view_presentation">
                        <div class="ow_googlemap_location_address" >
                            <a href="javascript://">' . $location['address'] . '</a><span class="ic_googlemap_pin"></span>
                        </div>
                        <div class="ow_googlemap_location_map" style="width:65%; display:none;">
                        </div>
                     </div>';
        }
    }

    $e->setData($data);
}
OW::getEventManager()->bind('base.questions_field_get_value', 'googlelocation_questions_field_get_value');

function googlelocation_questions_get_data( OW_Event $e )
{
    $params = $e->getParams();
    $data = $e->getData();

    foreach ( $data as $userId => $questions )
    {
        foreach ( $questions as $key => $value )
        {
            if ( $key == 'googlemap_location' )
            {
                $location = GOOGLELOCATION_BOL_LocationService::getInstance()->findByUserId($userId);

                if ( $location )
                {
                    $data[$userId][$key] = array(
                        'address' => $location->address,
                        'latitude' => $location->lat,
                        'longitude' => $location->lng,
                        'northEastLat' => $location->northEastLat,
                        'northEastLng' => $location->northEastLng,
                        'southWestLat' => $location->southWestLat,
                        'southWestLng' => $location->southWestLng,
                        'json' => $location->json
                    );
                }
            }
        }
    }

    $e->setData($data);
}
OW::getEventManager()->bind('base.questions_get_data', 'googlelocation_questions_get_data');

// -- search
function googlelocation_question_search_sql( BASE_CLASS_QueryBuilderEvent $e )
{
    $params = $e->getParams();
    $question = !empty($params['question']) ? $params['question'] : null;
    $questionValue = !empty($params['value']) ? $params['value'] : null;

    if ( !empty($question) && $question->name == 'googlemap_location' )
    {
        if ( empty($questionValue) || empty($questionValue['json']) )
        {
            $e->addWhere(" 1 ");
            return;
        }

        $element = new GOOGLELOCATION_CLASS_Location('location');
        $element->setValue($params['value']);
        $value = $element->getListValue();

        $json = !empty($value['json']) ? json_decode($value['json'], true) : array();

        $countryCode = "";
        if ( !empty($json['address_components']) )
        {
            foreach ( $json['address_components'] as $component )
            {
                if ( !empty($component['types']) && is_array($component['types']) && in_array('country', $component['types']) )
                {
                    $countryCode = !empty($component['short_name']) ? $component['short_name'] : "";
                }
            }
        }

        if ( !empty($value['distance']) && (float) $value['distance'] > 0 )
        {
            $coord = GOOGLELOCATION_BOL_LocationService::getInstance()->getNewCoordinates($value['southWestLat'], $value['southWestLng'], 225, (float) $value['distance']);
            $value['southWestLat'] = $coord['lat'];
            $value['southWestLng'] = $coord['lng'];

            $coord = GOOGLELOCATION_BOL_LocationService::getInstance()->getNewCoordinates($value['northEastLat'], $value['northEastLng'], 45, (float) $value['distance']);
            $value['northEastLat'] = $coord['lat'];
            $value['northEastLng'] = $coord['lng'];
        }

        $sql = GOOGLELOCATION_BOL_LocationService::getInstance()->getSearchInnerJoinSql('user', $value['southWestLat'], $value['southWestLng'], $value['northEastLat'], $value['northEastLng'], $countryCode);
        $e->addJoin($sql);
    }
}
OW::getEventManager()->bind('base.question.search_sql', 'googlelocation_question_search_sql');


/* function googlelocation_questions_get_search_sql( OW_Event $e )
{
    $params = $e->getParams();
    
    if ( !empty($params['fieldName']) && $params['fieldName'] == 'googlemap_location' && !empty($params['value']) )
    {
        if ( empty($value['json']) )
        {
            $e->setData(" 1 OR 1 ");
            return;
        }

        $element = new GOOGLELOCATION_CLASS_Location('location');
        $element->setValue($params['value']);
        $value = $element->getListValue();

        $json = !empty($value['json']) ? json_decode($value['json'], true) : array();

        $countryCode = "";
        if ( !empty($json['address_components']) )
        {
            foreach ( $json['address_components'] as $component )
            {
                if ( !empty($component['types']) && is_array($component['types']) && in_array('country', $component['types']) )
                {
                    $countryCode = !empty($component['short_name']) ? $component['short_name'] : "";
                }
            }
        }

        if ( !empty($value['distance']) && (float) $value['distance'] > 0 )
        {
            $coord = GOOGLELOCATION_BOL_LocationService::getInstance()->getNewCoordinates($value['southWestLat'], $value['southWestLng'], 225, (float) $value['distance']);
            $value['southWestLat'] = $coord['lat'];
            $value['southWestLng'] = $coord['lng'];

            $coord = GOOGLELOCATION_BOL_LocationService::getInstance()->getNewCoordinates($value['northEastLat'], $value['northEastLng'], 45, (float) $value['distance']);
            $value['northEastLat'] = $coord['lat'];
            $value['northEastLng'] = $coord['lng'];
        }

        $sql = GOOGLELOCATION_BOL_LocationService::getInstance()->getSearchInnerJoinSql('user', $value['southWestLat'], $value['southWestLng'], $value['northEastLat'], $value['northEastLng'], $countryCode);
        $e->setData(" 1 ) " . mb_substr($sql, 0, -2) . "  ");
    }
}
OW::getEventManager()->bind('base.questions_get_search_sql', 'googlelocation_questions_get_search_sql'); */

//-- search
function googlelocation_add_js_lib( OW_Event $e )
{
    $languageCode = GOOGLELOCATION_BOL_LocationService::getInstance()->getLanguageCode();

    $key = Ow::getConfig()->getValue('googlelocation', 'api_key');

    if ( !empty($key) )
    {
        $key = '&key=' . $key;
    }

    OW::getDocument()->addStyleSheet(OW::getPluginManager()->getPlugin('googlelocation')->getStaticCssUrl() . 'location.css');
    OW::getDocument()->addScript('http://maps.google.com/maps/api/js?sensor=false' . $key . '&language=' . $languageCode);
    OW::getDocument()->addScript(OW::getPluginManager()->getPlugin('base')->getStaticJsUrl() . 'jquery-ui-1.8.9.custom.min.js');
    OW::getDocument()->addScript(OW::getPluginManager()->getPlugin('googlelocation')->getStaticJsUrl() . 'InfoBubble.js');
    OW::getDocument()->addOnloadScript('window.map = [];');
}
OW::getEventManager()->bind(OW_EventManager::ON_BEFORE_DOCUMENT_RENDER, 'googlelocation_add_js_lib');

function googlelocation_add_fake_questions( OW_Event $e )
{
    $params = $e->getParams();

    if ( !empty($params['name']) && $params['name'] == 'googlemap_location' )
    {
        $e->setData(false);
    }
}
OW::getEventManager()->bind('base.questions_field_add_fake_questions', 'googlelocation_add_fake_questions');

function googlelocation_get_map_component( OW_Event $e )
{

    $params = $e->getParams();

    $userIdList = !empty($params['userIdList']) ? $params['userIdList'] : array();
    $backUri = !empty($params['backUri']) ? $params['backUri'] : OW::getRouter()->getUri();
    
    $map = GOOGLELOCATION_BOL_LocationService::getInstance()->getUserListMapCmp($userIdList, $backUri);

    $e->setData($map);
}
OW::getEventManager()->bind('googlelocation.get_map_component', 'googlelocation_get_map_component');


//// ----------------- Groups plugin integation ------------------------------
//
//function googlelocation_on_groups_plugin_activate( OW_Event $e )
//{
//    $params = $e->getParams();
//    $pluginKey = $params['pluginKey'];
//
//    if ( $pluginKey == 'groups' )
//    {
//        $widgetService = BOL_ComponentAdminService::getInstance();
//
//        $widget = $widgetService->addWidget('GOOGLELOCATION_CMP_GroupsWidget', false);
//        $placeWidget = $widgetService->addWidgetToPlace($widget, 'group');
//        $widgetService->addWidgetToPosition($placeWidget, BOL_ComponentAdminService::SECTION_RIGHT, 0);
//    }
//}
//OW::getEventManager()->bind(OW_EventManager::ON_AFTER_PLUGIN_ACTIVATE, 'googlelocation_on_groups_plugin_activate');
//
//function googlelocation_on_groups_plugin_deactivate( OW_Event $e )
//{
//    $params = $e->getParams();
//    $pluginKey = $params['pluginKey'];
//
//    if ( $pluginKey == 'groups' )
//    {
//        BOL_ComponentAdminService::getInstance()->deleteWidget('GOOGLELOCATION_CMP_GroupsWidget');
//    }
//}
//OW::getEventManager()->bind(OW_EventManager::ON_BEFORE_PLUGIN_DEACTIVATE, 'googlelocation_on_groups_plugin_deactivate');
//
//// ----------------- Events plugin integation ------------------------------

function googlelocation_event_add_location_init( OW_Event $e )
{
    $params = $e->getParams();
}
OW::getEventManager()->bind('base.questions_field_init', 'googlelocation_questions_field_init');

function googlelocation_event_edit_location_init( OW_Event $e )
{
    $params = $e->getParams();

    if ( $params['name'] == 'location' )
    {
        /* @var $formElement TextField  */
        $formElement = $e->getData();
        $label = $formElement->getLabel();

        $uriParams = OW::getRequest()->getUriParams();

        //printVar(OW::getRequest());
        $locationFormElement = new GOOGLELOCATION_CLASS_Location('location');
        $locationFormElement->setLabel($label);
        printVar($uriParams);
        if ( !empty($uriParams['eventId']) )
        {
            $location = GOOGLELOCATION_BOL_LocationService::getInstance()->findByEntityIdAndEntityType((int)$uriParams['eventId'], 'event');
            printVar($location);
            if ( !empty($location) && $location instanceof GOOGLELOCATION_BOL_Location )
            {
                $value = array(
                    'address' => $location->address,
                    'latitude' => $location->lat,
                    'longitude' => $location->lng,
                    'northEastLat' => $location->northEastLat,
                    'northEastLng' => $location->northEastLng,
                    'southWestLat' => $location->southWestLat,
                    'southWestLng' => $location->southWestLng,
                    'json' => $location->json
                );

                $locationFormElement->setValue($value);
            }
        }

        $e->setData($locationFormElement);
    }
}
OW::getEventManager()->bind('event.event_add_form.get_element', 'googlelocation_event_edit_location_init');

function googlelocation_before_event_edit( OW_Event $e )
{
    $data = $e->getData();
    $params = $e->getParams();
    printVar($data);
    if ( !empty($data['location']) && !empty($params['eventId']) )
    {
        $locationFormElement = new GOOGLELOCATION_CLASS_Location('location');
        $locationFormElement->setValue($data['location']);
        $value = $locationFormElement->getValue();

        if ( !empty($value) )
        {

            $json = !empty($value['json']) ? json_decode($value['json'], true) : array();

            $countryCode = "";
            if ( !empty($json['address_components']) )
            {
                foreach ( $json['address_components'] as $component )
                {
                    if ( !empty($component['types']) && is_array($component['types']) && in_array('country', $component['types']) )
                    {
                        $countryCode = !empty($component['short_name']) ? $component['short_name'] : "";
                    }
                }
            }

            $location = GOOGLELOCATION_BOL_LocationService::getInstance()->findByEntityIdAndEntityType((int)$params['eventId'], 'event');

            if ( empty($location) )
            {
                $location = new GOOGLELOCATION_BOL_Location();
            }

            $location->entityId = (int)$params['eventId'];
            $location->countryCode = $countryCode;
            $location->address = !empty($value['address']) ? $value['address'] : "";
            $location->lat = (float) $value['latitude'];
            $location->lng = (float) $value['longitude'];
            $location->northEastLat = (float) $value['northEastLat'];
            $location->northEastLng = (float) $value['northEastLng'];
            $location->southWestLat = (float) $value['southWestLat'];
            $location->southWestLng = (float) $value['southWestLng'];
            $location->json = !empty($value['json']) ? $value['json'] : "";
            $location->entityType = GOOGLELOCATION_BOL_LocationDao::ENTITY_TYPE_EVENT;
            printVar($location);
            GOOGLELOCATION_BOL_LocationService::getInstance()->save($location);

            $data['location'] = $location->address;
        }
        else
        {
            $data['location'] = "";
        }
    }
    else
    {
        $data['location'] = "";
    }

    $e->setData($data);
}
OW::getEventManager()->bind('events.before_event_edit', 'googlelocation_before_event_edit');

function googlelocation_before_event_create_data( OW_Event $e )
{
    $data = $e->getData();

    if ( !empty($data['location']) )
    {
        $locationFormElement = new GOOGLELOCATION_CLASS_Location('location');
        $locationFormElement->setValue($data['location']);
        $value = $locationFormElement->getValue();

        if ( !empty($value) )
        {
            OW::getSession()->set('googlelocation_tmp_event_data', $value);
            $data['location'] = !empty($value['address']) ? $value['address'] : "";
        }
        else
        {
            $data['location'] = "";
        }
    }
    else
    {
        $data['location'] = "";
    }

    $e->setData($data);
}
OW::getEventManager()->bind('events.before_event_create', 'googlelocation_before_event_create_data');

function googlelocation_after_event_crate( OW_Event $e )
{
    $params = $e->getParams();

    if ( !empty($params['eventDto']) && $params['eventDto'] instanceof EVENT_BOL_Event)
    {
        /* @var $eventDto EVENT_BOL_Event */
        $eventDto = $params['eventDto'];

        $locationValue = OW::getSession()->get('googlelocation_tmp_event_data');
        OW::getSession()->delete('googlelocation_tmp_event_data');

        $locationFormElement = new GOOGLELOCATION_CLASS_Location('location');
        $locationFormElement->setValue($locationValue);
        $value = $locationFormElement->getValue();

        if ( !empty($value) )
        {

            $json = !empty($value['json']) ? json_decode($value['json'], true) : array();

            $countryCode = "";
            if ( !empty($json['address_components']) )
            {
                foreach ( $json['address_components'] as $component )
                {
                    if ( !empty($component['types']) && is_array($component['types']) && in_array('country', $component['types']) )
                    {
                        $countryCode = !empty($component['short_name']) ? $component['short_name'] : "";
                    }
                }
            }

            $location = new GOOGLELOCATION_BOL_Location();

            $location->entityId = $eventDto->id;
            $location->countryCode = $countryCode;
            $location->address = !empty($value['address']) ? $value['address'] : "";
            $location->lat = (float) $value['latitude'];
            $location->lng = (float) $value['longitude'];
            $location->northEastLat = (float) $value['northEastLat'];
            $location->northEastLng = (float) $value['northEastLng'];
            $location->southWestLat = (float) $value['southWestLat'];
            $location->southWestLng = (float) $value['southWestLng'];
            $location->json = !empty($value['json']) ? $value['json'] : "";
            $location->entityType = GOOGLELOCATION_BOL_LocationDao::ENTITY_TYPE_EVENT;

            GOOGLELOCATION_BOL_LocationService::getInstance()->save($location);
        }
    }
    OW::getSession()->delete('googlelocation_tmp_event_data');
}
OW::getEventManager()->bind('event_after_create_event', 'googlelocation_after_event_crate');

function googlelocation_add_event_content_menu_item( BASE_CLASS_EventCollector $e )
{
    $menuItem = new BASE_MenuItem();
    $menuItem->setKey('events_map');
    $menuItem->setUrl(OW::getRouter()->urlForRoute('googlelocation_event_map'));
    $menuItem->setLabel(OW::getLanguage()->text('googlelocation', 'events_map_label'));
    $menuItem->setIconClass('ow_ic_bookmark');
    $menuItem->setOrder(5);

    $e->add($menuItem);
}
OW::getEventManager()->bind('event.add_content_menu_item', 'googlelocation_add_event_content_menu_item');

function googlelocation_add_event_map_on_view_page( BASE_CLASS_EventCollector $e )
{
    $uriParams = OW::getRequest()->getUriParams();

    if ( !empty($uriParams['eventId']) )
    {
        $location = GOOGLELOCATION_BOL_LocationService::getInstance()->findByEntityIdAndEntityType((int)$uriParams['eventId'], 'event');

        if ( !empty($location) && $location instanceof GOOGLELOCATION_BOL_Location )
        {
            $value = array(
                'address' => $location->address,
                'latitude' => $location->lat,
                'longitude' => $location->lng,
                'northEastLat' => $location->northEastLat,
                'northEastLng' => $location->northEastLng,
                'southWestLat' => $location->southWestLat,
                'southWestLng' => $location->southWestLng,
                'json' => $location->json
            );

            $map = new GOOGLELOCATION_CMP_Map();
            $map->setHeight('180px');
            $map->setZoom(9);
            $map->setMapOptions(array(
                'disableDefaultUI' => "false",
                'draggable' => "true",
                'mapTypeControl' => "false",
                'overviewMapControl' => "false",
                'panControl' => "false",
                'rotateControl' => "true",
                'scaleControl' => "false",
                'scrollwheel' => "true",
                'streetViewControl' => "false",
                'zoomControl' => "true"));
            $map->setCenter($value['latitude'], $value['longitude']);
            $map->setBounds($value['southWestLat'], $value['southWestLng'], $value['northEastLat'], $value['northEastLng']);
            $map->addPoint($value, $value['address']);

            $map->setBox('Location', 'ow_ic_bookmark', 'ow_std_margin clearfix');

            $mapHtml = $map->render();

            $e->add($mapHtml);
        }
    }
}
OW::getEventManager()->bind('events.view.content.after_event_description', 'googlelocation_add_event_map_on_view_page');

